public void testPowSpecialCases() {
        double x;
        x = FastMath.pow(-1.0, 0.0);
        if (x != 1.0)
            throw new RuntimeException("pow(x, 0) should be 1.0");

        x = FastMath.pow(-1.0, -0.0);
        if (x != 1.0)
            throw new RuntimeException("pow(x, -0) should be 1.0");

        x = FastMath.pow(Math.PI, 1.0);
        if (x != Math.PI)
            throw new RuntimeException("pow(PI, 1.0) should be PI");

        x = FastMath.pow(-Math.PI, 1.0);
        if (x != (-Math.PI))
            throw new RuntimeException("pow(-PI, 1.0) should be PI");

        x = FastMath.pow(Math.PI, Double.NaN);
        if (x == x)
            throw new RuntimeException("pow(PI, NaN) should be NaN");

        x = FastMath.pow(Double.NaN, Math.PI);
        if (x == x)
            throw new RuntimeException("pow(NaN, PI) should be NaN");

        x = FastMath.pow(2.0, Double.POSITIVE_INFINITY);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(2.0, Infinity) should be Infinity");

        x = FastMath.pow(0.5, Double.NEGATIVE_INFINITY);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(0.5, -Infinity) should be Infinity");

        x = FastMath.pow(0.5, Double.POSITIVE_INFINITY);
        if (x != 0.0)
            throw new RuntimeException("pow(0.5, Infinity) should be 0.0");

        x = FastMath.pow(2.0, Double.NEGATIVE_INFINITY);
        if (x != 0.0)
            throw new RuntimeException("pow(2.0, -Infinity) should be 0.0");

        x = FastMath.pow(0.0, 0.5);
        if (x != 0.0)
            throw new RuntimeException("pow(0.0, 0.5) should be 0.0");

        x = FastMath.pow(Double.POSITIVE_INFINITY, -0.5);
        if (x != 0.0)
            throw new RuntimeException("pow(Inf, -0.5) should be 0.0");

        x = FastMath.pow(0.0, -0.5);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(0.0, -0.5) should be Inf");

        x = FastMath.pow(Double.POSITIVE_INFINITY, 0.5);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(Inf, 0.5) should be Inf");

        x = FastMath.pow(-0.0, -3.0);
        if (x != Double.NEGATIVE_INFINITY)
            throw new RuntimeException("pow(-0.0, -3.0) should be -Inf");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, 3.0);
        if (x != Double.NEGATIVE_INFINITY)
            throw new RuntimeException("pow(-Inf, -3.0) should be -Inf");

        x = FastMath.pow(-0.0, -3.5);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(-0.0, -3.5) should be Inf");

        x = FastMath.pow(Double.POSITIVE_INFINITY, 3.5);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(Inf, 3.5) should be Inf");

        x = FastMath.pow(-2.0, 3.0);
        if (x != (-8.0))
            throw new RuntimeException("pow(-2.0, 3.0) should be -8.0");

        x = FastMath.pow(-2.0, 3.5);
        if (x == x)
            throw new RuntimeException("pow(-2.0, 3.5) should be NaN");

        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);
        if (x == x)
            throw new RuntimeException("pow(+Inf, NaN) should be NaN");

        x = FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN);
        if (x == x)
            throw new RuntimeException("pow(+Inf, NaN) should be NaN");

        x = FastMath.pow(1.0, Double.POSITIVE_INFINITY);
        if (x == x)
            throw new RuntimeException("pow(1.0, +Inf) should be NaN");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);
        if (x == x)
            throw new RuntimeException("pow(-Inf, NaN) should be NaN");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, -1.0);
        if (x != (-0.0))
            throw new RuntimeException("pow(-Inf, -1.0) should be 0.0");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, -2.0);
        if (x != 0.0)
            throw new RuntimeException("pow(-Inf, -2.0) should be 0.0");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, 1.0);
        if (x != Double.NEGATIVE_INFINITY)
            throw new RuntimeException("pow(-Inf, 1.0) should be -Inf");

        x = FastMath.pow(Double.NEGATIVE_INFINITY, 2.0);
        if (x != Double.POSITIVE_INFINITY)
            throw new RuntimeException("pow(-Inf, 2.0) should be +Inf");

        x = FastMath.pow(1.0, Double.NEGATIVE_INFINITY);
        if (x == x)
            throw new RuntimeException("pow(1.0, -Inf) should be NaN");

    }