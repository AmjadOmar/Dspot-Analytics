public void testMatrix() throws NotARotationMatrixException {
        double[][] m1 = new double[][]{ new double[]{ 0.0, 1.0, 0.0 }, new double[]{ 0.0, 0.0, 1.0 }, new double[]{ 1.0, 0.0, 0.0 } };
        Rotation r = new Rotation(m1, 1.0E-7);
        checkVector(r.applyTo(Vector3D.plusI), Vector3D.plusK);
        checkVector(r.applyTo(Vector3D.plusJ), Vector3D.plusI);
        checkVector(r.applyTo(Vector3D.plusK), Vector3D.plusJ);
        double[][] m2 = new double[][]{ new double[]{ 0.83203, -0.55012, -0.07139 }, new double[]{ 0.48293, 0.78164, -0.39474 }, new double[]{ 0.27296, 0.29396, 0.91602 } };
        r = new Rotation(m2, 1.0E-12);
        double[][] m3 = r.getMatrix();
        double d00 = m2[0][0] - m3[0][0];
        double d01 = m2[0][1] - m3[0][1];
        double d02 = m2[0][2] - m3[0][2];
        double d10 = m2[1][0] - m3[1][0];
        double d11 = m2[1][1] - m3[1][1];
        double d12 = m2[1][2] - m3[1][2];
        double d20 = m2[2][0] - m3[2][0];
        double d21 = m2[2][1] - m3[2][1];
        double d22 = m2[2][2] - m3[2][2];
        Assert.assertTrue(Math.abs(d00) < 6.0E-6);
        Assert.assertTrue(Math.abs(d01) < 6.0E-6);
        Assert.assertTrue(Math.abs(d02) < 6.0E-6);
        Assert.assertTrue(Math.abs(d10) < 6.0E-6);
        Assert.assertTrue(Math.abs(d11) < 6.0E-6);
        Assert.assertTrue(Math.abs(d12) < 6.0E-6);
        Assert.assertTrue(Math.abs(d20) < 6.0E-6);
        Assert.assertTrue(Math.abs(d21) < 6.0E-6);
        Assert.assertTrue(Math.abs(d22) < 6.0E-6);
        Assert.assertTrue(Math.abs(d00) > 4.0E-7);
        Assert.assertTrue(Math.abs(d01) > 4.0E-7);
        Assert.assertTrue(Math.abs(d02) > 4.0E-7);
        Assert.assertTrue(Math.abs(d10) > 4.0E-7);
        Assert.assertTrue(Math.abs(d11) > 4.0E-7);
        Assert.assertTrue(Math.abs(d12) > 4.0E-7);
        Assert.assertTrue(Math.abs(d20) > 4.0E-7);
        Assert.assertTrue(Math.abs(d21) > 4.0E-7);
        Assert.assertTrue(Math.abs(d22) > 4.0E-7);
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                double m3tm3 = ((m3[i][0] * m3[j][0]) + (m3[i][1] * m3[j][1])) + (m3[i][2] * m3[j][2]);
                if (i == j) {
                    Assert.assertTrue(Math.abs(m3tm3 - 1.0) < 1.0E-10);
                } else {
                    Assert.assertTrue(Math.abs(m3tm3) < 1.0E-10);
                }
            }
        }
        checkVector(r.applyTo(Vector3D.plusI), new Vector3D(m3[0][0], m3[1][0], m3[2][0]));
        checkVector(r.applyTo(Vector3D.plusJ), new Vector3D(m3[0][1], m3[1][1], m3[2][1]));
        checkVector(r.applyTo(Vector3D.plusK), new Vector3D(m3[0][2], m3[1][2], m3[2][2]));
        double[][] m4 = new double[][]{ new double[]{ 1.0, 0.0, 0.0 }, new double[]{ 0.0, -1.0, 0.0 }, new double[]{ 0.0, 0.0, -1.0 } };
        r = new Rotation(m4, 1.0E-7);
        checkAngle(r.getAngle(), Math.PI);
        try {
            double[][] m5 = new double[][]{ new double[]{ 0.0, 0.0, 1.0 }, new double[]{ 0.0, 1.0, 0.0 }, new double[]{ 1.0, 0.0, 0.0 } };
            r = new Rotation(m5, 1.0E-7);
            Assert.fail(("got " + r) + ", should have caught an exception");
        } catch (NotARotationMatrixException e) {

        } catch (Exception e) {
            Assert.fail("wrong exception caught");
        }
    }