public void testAtan2SpecialCases() {
        double x;
        x = FastMath.atan2(Double.NaN, 0.0);
        if (x == x)
            throw new RuntimeException("atan2(NaN, 0.0) should be NaN");

        x = FastMath.atan2(0.0, Double.NaN);
        if (x == x)
            throw new RuntimeException("atan2(0.0, NaN) should be NaN");

        x = FastMath.atan2(0.0, 0.0);
        if ((x != 0.0) || ((1 / x) != Double.POSITIVE_INFINITY))
            throw new RuntimeException("atan2(0.0, 0.0) should be 0.0");

        x = FastMath.atan2(0.0, 0.001);
        if ((x != 0.0) || ((1 / x) != Double.POSITIVE_INFINITY))
            throw new RuntimeException("atan2(0.0, 0.001) should be 0.0");

        x = FastMath.atan2(0.1, Double.POSITIVE_INFINITY);
        if ((x != 0.0) || ((1 / x) != Double.POSITIVE_INFINITY))
            throw new RuntimeException("atan2(0.1, +Inf) should be 0.0");

        x = FastMath.atan2(-0.0, 0.0);
        if ((x != 0.0) || ((1 / x) != Double.NEGATIVE_INFINITY))
            throw new RuntimeException("atan2(-0.0, 0.0) should be -0.0");

        x = FastMath.atan2(-0.0, 0.001);
        if ((x != 0.0) || ((1 / x) != Double.NEGATIVE_INFINITY))
            throw new RuntimeException("atan2(-0.0, 0.001) should be -0.0");

        x = FastMath.atan2(-0.1, Double.POSITIVE_INFINITY);
        if ((x != 0.0) || ((1 / x) != Double.NEGATIVE_INFINITY))
            throw new RuntimeException("atan2(-0.0, +Inf) should be -0.0");

        x = FastMath.atan2(0.0, -0.0);
        if (x != Math.PI)
            throw new RuntimeException("atan2(0.0, -0.0) should be PI");

        x = FastMath.atan2(0.1, Double.NEGATIVE_INFINITY);
        if (x != Math.PI)
            throw new RuntimeException("atan2(0.1, -Inf) should be PI");

        x = FastMath.atan2(-0.0, -0.0);
        if (x != (-Math.PI))
            throw new RuntimeException("atan2(-0.0, -0.0) should be -PI");

        x = FastMath.atan2(-0.1, Double.NEGATIVE_INFINITY);
        if (x != (-Math.PI))
            throw new RuntimeException("atan2(0.1, -Inf) should be -PI");

        x = FastMath.atan2(0.1, 0.0);
        if (x != (Math.PI / 2))
            throw new RuntimeException("atan2(0.1, 0.0) should be PI/2");

        x = FastMath.atan2(0.1, -0.0);
        if (x != (Math.PI / 2))
            throw new RuntimeException("atan2(0.1, -0.0) should be PI/2");

        x = FastMath.atan2(Double.POSITIVE_INFINITY, 0.1);
        if (x != (Math.PI / 2))
            throw new RuntimeException("atan2(Inf, 0.1) should be PI/2");

        x = FastMath.atan2(Double.POSITIVE_INFINITY, -0.1);
        if (x != (Math.PI / 2))
            throw new RuntimeException("atan2(Inf, -0.1) should be PI/2");

        x = FastMath.atan2(-0.1, 0.0);
        if (x != ((-Math.PI) / 2))
            throw new RuntimeException("atan2(-0.1, 0.0) should be -PI/2");

        x = FastMath.atan2(-0.1, -0.0);
        if (x != ((-Math.PI) / 2))
            throw new RuntimeException("atan2(-0.1, -0.0) should be -PI/2");

        x = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.1);
        if (x != ((-Math.PI) / 2))
            throw new RuntimeException("atan2(-Inf, 0.1) should be -PI/2");

        x = FastMath.atan2(Double.NEGATIVE_INFINITY, -0.1);
        if (x != ((-Math.PI) / 2))
            throw new RuntimeException("atan2(-Inf, -0.1) should be -PI/2");

        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        if (x != (Math.PI / 4))
            throw new RuntimeException("atan2(Inf, Inf) should be PI/4");

        x = FastMath.atan2(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
        if (x != ((Math.PI * 3.0) / 4.0))
            throw new RuntimeException("atan2(Inf, -Inf) should be PI * 3/4");

        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        if (x != ((-Math.PI) / 4))
            throw new RuntimeException("atan2(-Inf, Inf) should be -PI/4");

        x = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        if (x != (((-Math.PI) * 3.0) / 4.0))
            throw new RuntimeException("atan2(-Inf, -Inf) should be -PI * 3/4");

    }