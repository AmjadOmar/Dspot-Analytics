public void testMatrix_failAssert0() throws NotARotationMatrixException {
        try {
            double[][] m1 = new double[][]{ new double[]{ 0.0, 1.0, 0.0 }, new double[]{ 0.0, 0.0, 1.0 }, new double[]{ 1.0, 0.0, 0.0 } };
            Rotation r = new Rotation(m1, 1.0E-7);
            r.applyTo(Vector3D.plusI);
            r.applyTo(Vector3D.plusJ);
            r.applyTo(Vector3D.plusK);
            double[][] m2 = new double[][]{ new double[]{ 0.83203, -0.55012, -0.07139 }, new double[]{ 0.48293, 0.78164, -0.39474 }, new double[]{ 0.27296, 0.29396, 0.91602 } };
            r = new Rotation(m2, 1.0E-12);
            double[][] m3 = r.getMatrix();
            double d00 = m2[0][0] - m3[0][0];
            double d01 = m2[0][1] - m3[0][1];
            double d02 = m2[0][2] - m3[0][2];
            double d10 = m2[1][0] - m3[1][0];
            double d11 = m2[1][1] - m3[1][1];
            double d12 = m2[1][2] - m3[1][2];
            double d20 = m2[2][0] - m3[2][0];
            double d21 = m2[2][1] - m3[2][1];
            double d22 = m2[2][2] - m3[2][2];
            boolean boolean_0 = Math.abs(d00) < 6.0E-6;
            boolean boolean_1 = Math.abs(d01) < 6.0E-6;
            boolean boolean_2 = Math.abs(d02) < 6.0E-6;
            boolean boolean_3 = Math.abs(d10) < 6.0E-6;
            boolean boolean_4 = Math.abs(d11) < 6.0E-6;
            boolean boolean_5 = Math.abs(d12) < 6.0E-6;
            boolean boolean_6 = Math.abs(d20) < 6.0E-6;
            boolean boolean_7 = Math.abs(d21) < 6.0E-6;
            boolean boolean_8 = Math.abs(d22) < 6.0E-6;
            boolean boolean_9 = Math.abs(d00) > 4.0E-7;
            boolean boolean_10 = Math.abs(d01) > 4.0E-7;
            boolean boolean_11 = Math.abs(d02) > 4.0E-7;
            boolean boolean_12 = Math.abs(d10) > 4.0E-7;
            boolean boolean_13 = Math.abs(d11) > 4.0E-7;
            boolean boolean_14 = Math.abs(d12) > 4.0E-7;
            boolean boolean_15 = Math.abs(d20) > 4.0E-7;
            boolean boolean_16 = Math.abs(d21) > 4.0E-7;
            boolean boolean_17 = Math.abs(d22) > 4.0E-7;
            for (int i = 0; i < 3; ++i) {
                for (int j = 0; j < 3; ++j) {
                    double m3tm3 = ((m3[i][0] * m3[j][0]) + (m3[i][1] * m3[j][1])) + (m3[i][2] * m3[j][2]);
                    if (i == j) {
                        boolean boolean_18 = Math.abs(m3tm3 - 1.0) < 1.0E-10;
                    } else {
                        boolean boolean_19 = Math.abs(m3tm3) < 1.0E-10;
                    }
                }
            }
            r.applyTo(Vector3D.plusI);
            new Vector3D(m3[0][0], m3[1][0], m3[2][0]);
            r.applyTo(Vector3D.plusJ);
            new Vector3D(m3[0][1], m3[1][1], m3[2][1]);
            r.applyTo(Vector3D.plusK);
            new Vector3D(m3[0][2], m3[1][2], m3[2][2]);
            double[][] m4 = new double[][]{ new double[]{ 1.0, 0.0, 0.0 }, new double[]{ 0.0, -1.0, 0.0 }, new double[]{ 0.0, 0.0, -1.0 } };
            r = new Rotation(m4, 1.0E-7);
            r.getAngle();
            {
                double[][] m5 = new double[][]{ new double[]{ 0.0, 0.0, 1.0 }, new double[]{ 0.0, 1.0, 0.0 }, new double[]{ 1.0, 0.0, 0.0 } };
                r = new Rotation(m5, 1.0E-7);
                String String_20 = ("got " + r) + ", should have caught an exception";
            }
            TestCase.fail("testMatrix should have thrown NotARotationMatrixException");
        } catch (NotARotationMatrixException expected) {
            TestCase.assertEquals("the closest orthogonal matrix has a negative determinant -1.0", expected.getMessage());
        }
    }